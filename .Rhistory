xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
# observed velocity
time <- as.POSIXct(Xvel$time)
x <- Xvel$value_Xvel
# various time vectors
timeInflow <- as.POSIXct(X124001B$`Date and time`,format = "%d/%m/%Y %H:%M", tz = "Australia/Brisbane")
timeStage <- as.POSIXct(H$Units,format = "%Y-%m-%d %H:%M:%S", tz = "Australia/Brisbane")
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT)
# interpolate upstream flow
inflow <- realTimeloads::linear_interpolation_with_time_limit(timeInflow,X124001B$Mean,ti,threshold=1)$x_interpolated
# sum(is.na(inflow)), check for missing data, no missing data
#plot(inflow)
# interpolate stage
Hi <- linear_interpolation_with_time_limit(timeStage,H$m,ti,1)
# interpolate velocity
xi <- linear_interpolation_with_time_limit(time,x,ti,1)$x_interpolated
# check dhdt
#plot(ti,Xreg$`f.dhdt(imputeT)`,xlim = c(ti[1],ti[1000]),ylim = c(-0.1,0.1))
# fit harmonic model
igood <- is.finite(x)
hfit <- TideHarmonics::ftide(x[igood], time[igood],
TideHarmonics::hc7)
dt <- as.double(difftime(ti[2], ti[1], units = "hours"))
xp <- predict(hfit, from = min(ti), to = max(ti),
by = dt)
xph <- data.frame(t(predict(hfit, from = min(ti),
to = max(ti), by = dt, split = TRUE)))
# check harmonic model fit
#plot(time,x,col='black',xlim = c(time[1000],time[1025]),ylim = c(-0.5,0.5))
#points(ti,xp,col='red')
# trying different xregs
xreg <- cbind(xp,Xreg$`f.dhdt(imputeT)`,Xreg$`124005A.Rain168`,Xreg$`124002A.Rain168`,Xreg$`124003A.Rain168`)
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*31)
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
# interpolate stage
Hi <- linear_interpolation_with_time_limit(timeStage,H$m,ti,1)$x_interpolated
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*31)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*31)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*3)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi,xp)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*100)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
lines(ti,Hi,col='grey')
xreg <- cbind(inflow,Xreg$`f.dhdt(imputeT)`,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*100)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
lines(ti,Hi-mean(Hi,na.rm=TRUE),col='grey')
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*7)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
lines(ti,Hi-mean(Hi,na.rm=TRUE),col='grey')
plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
lines(ti,Hi-mean(Hi,na.rm=TRUE),col='grey')
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
lines(ti,Hi-mean(Hi,na.rm=TRUE),col='grey')
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*2000)
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
c(NA,diff(H))
c(NA,diff(Hi))
plot(c(NA,diff(Hi),Xreg$`f.dhdt(imputeT)`)
)
plot(c(NA,diff(Hi)),Xreg$`f.dhdt(imputeT)`)
?diff
?timeDate::diff
plot(timeDate::diff(Hi,1),Xreg$`f.dhdt(imputeT)`)
timeDate::diff(Hi,1)
plot(c(NA,Hi[2:length(H)]-Hi[1:length(H)-1],Xreg$`f.dhdt(imputeT)`)
plot(c(NA,Hi[2:length(H)]-Hi[1:length(H)-1]),Xreg$`f.dhdt(imputeT)`)
plot(c(NA,Hi[2:length(Hi)]-Hi[1:length(Hi)-1]),Xreg$`f.dhdt(imputeT)`)
dHdt <- c(NA,Hi[2:length(Hi)]-Hi[1:length(Hi)-1])
plot(Hi[1:1000])
plot(Hi[1:100])
plot(dHdt[1:100])
plot(Hi[1:100])
points(dHdt[1:100])
dHdt <- c(NA,Hi[2:length(Hi)]-Hi[1:length(Hi)-1])
plot(Hi[1:100])
points(dHdt[1:100],col='red')
dHdt[1:100]
dHdt[1:10]
Hi[1:10]
1.865-1.850
1.946-1.865
plot(Hi[1:100]-mean(Hi,na.rm=T))
points(dHdt[1:100],col='red')
plot(Hi[1:100]-mean(Hi,na.rm=T),xlim = c(-1,1))
points(dHdt[1:100],col='red')
plot(Hi[1:100]-mean(Hi,na.rm=T),ylim = c(-1,1))
points(dHdt[1:100],col='red')
xreg <- cbind(inflow,dHdt,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xreg <- cbind(inflow,dHdt,Hi)
output <- realTimeloads::impute_data(time,x,xreg,ti,harmonic = FALSE)
xpi <- output$Imputed_data$x
xpi[!output$Imputed_data$imputed] <- NA
plot(time,x,xlim = c(ti[2000],ti[5000]))
points(ti,xpi,col='red')
lines(ti,Xreg$`f.dhdt(imputeT)`)
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[1],ti[100]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[100],ti[200]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[5000],ti[5100]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[5000],ti[10000]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[5000],ti[7000]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[6000],ti[7000]))
lines(ti,dHdt,col='red')
ti[6000]
View(Xreg)
Xreg <- Xreg[8961:nrows(Xreg),]
Xreg <- Xreg[8961:nrow(Xreg),]
# observed velocity
time <- as.POSIXct(Xvel$time)
x <- Xvel$value_Xvel
# various time vectors
timeInflow <- as.POSIXct(X124001B$`Date and time`,format = "%d/%m/%Y %H:%M", tz = "Australia/Brisbane")
timeStage <- as.POSIXct(H$Units,format = "%Y-%m-%d %H:%M:%S", tz = "Australia/Brisbane")
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT)
# interpolate upstream flow
inflow <- realTimeloads::linear_interpolation_with_time_limit(timeInflow,X124001B$Mean,ti,threshold=1)$x_interpolated
# interpolate stage
Hi <- linear_interpolation_with_time_limit(timeStage,H$m,ti,1)$x_interpolated
dHdt <- c(NA,Hi[2:length(Hi)]-Hi[1:length(Hi)-1])
# interpolate velocity
xi <- linear_interpolation_with_time_limit(time,x,ti,1)$x_interpolated
# fit harmonic model
igood <- is.finite(x)
hfit <- TideHarmonics::ftide(x[igood], time[igood],
TideHarmonics::hc7)
dt <- as.double(difftime(ti[2], ti[1], units = "hours"))
xp <- predict(hfit, from = min(ti), to = max(ti),
by = dt)
xph <- data.frame(t(predict(hfit, from = min(ti),
to = max(ti), by = dt, split = TRUE)))
# check harmonic model fit
#plot(time,x,col='black',xlim = c(time[1000],time[1025]),ylim = c(-0.5,0.5))
#points(ti,xp,col='red')
# trying different xregs
xreg <- cbind(xp,Xreg$`f.dhdt(imputeT)`,Xreg$`124005A.Rain168`,Xreg$`124002A.Rain168`,Xreg$`124003A.Rain168`)
xreg <- cbind(inflow,dHdt,Hi)
#xreg <- cbind(Xreg$`f.dhdt(imputeT)`)
# try ARIMA
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*2000)
plot(ti,xii,col='red',xlim = c(ti[2500],ti[8000]),type="l")
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[6000],ti[7000]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[6200],ti[7000]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[6200],ti[6500]))
lines(ti,dHdt,col='red')
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[6200],ti[6300]))
lines(ti,dHdt,col='red')
time[1]
ti[1]
Xreg$imputeT
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT,tz = "Australia/Brisbane"))
Xreg$imputeT[1]
Xreg$imputeT[1:4]
ti[1:3]
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT,tz = "Australia/Brisbane")
ti[1:3]
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT,tz = "Australia/Brisbane")-10
ti
ti[1:4]
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT,tz = "Australia/Brisbane")-10*60*60
ti[1:4]
# interpolate upstream flow
inflow <- realTimeloads::linear_interpolation_with_time_limit(timeInflow,X124001B$Mean,ti,threshold=1)$x_interpolated
# sum(is.na(inflow)), check for missing data, no missing data
#plot(inflow)
# interpolate stage
Hi <- linear_interpolation_with_time_limit(timeStage,H$m,ti,1)$x_interpolated
dHdt <- c(NA,Hi[2:length(Hi)]-Hi[1:length(Hi)-1])
# interpolate velocity
xi <- linear_interpolation_with_time_limit(time,x,ti,1)$x_interpolated
# fit harmonic model
igood <- is.finite(x)
hfit <- TideHarmonics::ftide(x[igood], time[igood],
TideHarmonics::hc7)
dt <- as.double(difftime(ti[2], ti[1], units = "hours"))
xp <- predict(hfit, from = min(ti), to = max(ti),
by = dt)
xph <- data.frame(t(predict(hfit, from = min(ti),
to = max(ti), by = dt, split = TRUE)))
# check harmonic model fit
#plot(time,x,col='black',xlim = c(time[1000],time[1025]),ylim = c(-0.5,0.5))
#points(ti,xp,col='red')
# trying different xregs
xreg <- cbind(xp,Xreg$`f.dhdt(imputeT)`,Xreg$`124005A.Rain168`,Xreg$`124002A.Rain168`,Xreg$`124003A.Rain168`)
xreg <- cbind(inflow,dHdt,Hi)
plot(ti,Xreg$`f.dhdt(imputeT)`,type="l",xlim=c(ti[6200],ti[6300]))
lines(ti,dHdt,col='red')
View(Xreg)
load("ORCXvel_in_R_and_upstream_flow.RData")
H<-export_dsit10_124_OConnell_1240062_ORC_OConnell_River_at_Caravan_Park_Real_time_Data_Logger_Main_Level
rm(export_dsit10_124_OConnell_1240062_ORC_OConnell_River_at_Caravan_Park_Real_time_Data_Logger_Main_Level)
Xreg <- Xreg[8961:nrow(Xreg),]
# observed velocity
time <- as.POSIXct(Xvel$time)
x <- Xvel$value_Xvel
# various time vectors
timeInflow <- as.POSIXct(X124001B$`Date and time`,format = "%d/%m/%Y %H:%M", tz = "Australia/Brisbane")
timeStage <- as.POSIXct(H$Units,format = "%Y-%m-%d %H:%M:%S", tz = "Australia/Brisbane")
# Interpolation time
ti <- as.POSIXct(Xreg$imputeT,tz = "Australia/Brisbane")-10*60*60
# interpolate upstream flow
inflow <- realTimeloads::linear_interpolation_with_time_limit(timeInflow,X124001B$Mean,ti,threshold=1)$x_interpolated
# sum(is.na(inflow)), check for missing data, no missing data
#plot(inflow)
# interpolate stage
Hi <- linear_interpolation_with_time_limit(timeStage,H$m,ti,1)$x_interpolated
dHdt <- c(NA,Hi[2:length(Hi)]-Hi[1:length(Hi)-1])
# interpolate velocity
xi <- linear_interpolation_with_time_limit(time,x,ti,1)$x_interpolated
# check dhdt
#plot(ti,Xreg$`f.dhdt(imputeT)`,xlim = c(ti[1],ti[1000]),ylim = c(-0.1,0.1))
# fit harmonic model
igood <- is.finite(x)
hfit <- TideHarmonics::ftide(x[igood], time[igood],
TideHarmonics::hc7)
dt <- as.double(difftime(ti[2], ti[1], units = "hours"))
xp <- predict(hfit, from = min(ti), to = max(ti),
by = dt)
xph <- data.frame(t(predict(hfit, from = min(ti),
to = max(ti), by = dt, split = TRUE)))
# check harmonic model fit
#plot(time,x,col='black',xlim = c(time[1000],time[1025]),ylim = c(-0.5,0.5))
#points(ti,xp,col='red')
# trying different xregs
xreg <- cbind(xp,Xreg$`f.dhdt(imputeT)`,Xreg$`124005A.Rain168`,Xreg$`124002A.Rain168`,Xreg$`124003A.Rain168`)
xreg <- cbind(inflow,dHdt,Hi)
readings_per_hour<- 1
Xarima <- xreg
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*2000)
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
lines(ti,Xreg$`f.dhdt(imputeT)`,col='green')
lines(ti,Hi-mean(Hi,na.rm=TRUE),col='grey')
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*7)
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
xii <- imputeTS::na_kalman(xi,model ="auto.arima",xreg = as.matrix(Xarima),maxgap = readings_per_hour*24*700)
#plot(ti,xii,col='red',xlim = c(ti[1200],ti[1400]),type="l")
plot(ti,xii,col='red',type="l")
points(ti,xi,col='black')
output <- realTimeloads::impute_data(time,x,xreg,ti,harmonic = FALSE)
xpi <- output$Imputed_data$x
xpi[!output$Imputed_data$imputed] <- NA
plot(time,x,xlim = c(ti[2000],ti[5000]))
points(ti,xpi,col='red')
citation(package='realTimeLoads')
citation(package='realTimeloads')
is.null(site)
site <- NULL
is.null(site)
!is.null(site)
Are_you_sure <- readline("Warning!! Overwrite is set to TRUE, are you sure you want to overwrite all previous outputs? Input TRUE or FALSE")
True
Are_you_sure <- readline("Warning!! Overwrite is set to TRUE, are you sure you want to overwrite all previous outputs? Input TRUE or FALSE")
Are_you_sure
Are_you_sure <- readline("Warning!! Overwrite = T, are you sure? Enter: T or F")
user_input
user_input<-F
user_input!="T"
user_input="T"
user_input=="T"
user_input=="S"
user_input=="F"
user_input=="T"
user_input!="T"
user_input!="yes"
user_input="yes"
user_input <- readline("Warning!! Overwrite = T, are you sure? Enter: yes or no")
warning("Warning!! Overwrite = T, are you sure? Enter: yes or no")
warning("Warning!! Overwrite = T, are you sure? Enter: yes or no")
user_input <- readline("Warning!! Overwrite = T, are you sure? Enter: yes or no")
warning("Warning!! Overwrite = T, are you sure? Enter: yes or no")
user_input <- readline("Warning!! Overwrite = T, are you sure? Enter: yes or no: ")
Site_Folder <- c("MRD","JRI")
Site_Folder <- c(Site_Folder,Site_Folder)
Site_Folder
Site_Folder <- c("MRD","JRI")
Site_Number <- c("1110056","1120053")
Site_Name <- c("Mullgrave River at Deeral","Johnstone River at Innisfail")
Site_Folder <- c("MRD","JRI",Site_Folder)
Site_Number <- c("1110056","1120053",Site_Number)
Site_Name <- c("Mullgrave River at Deeral","Johnstone River at Innisfail",Site_Name)
Site_Folder
Site_List = data.frame(Site_Folder,Site_Number,Site_Name)
Site_List
Site_List[unique(Site_List$Site_Folder),]
unique(Site_List$Site_Folder)
unique(Site_List)
usethis::use_import_from("graphics", "abline", "par", "points", "segments")
usethis::use_import_from("graphics","abline")
usethis::use_import_from("graphics","abline")
view(imputeTS::na_kalman
)
View(imputeTS::na_kalman)
TSS <- readRDS("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data_test/JRI/Analyte_data/TSS_estimated_from_SCI_with_metadata.rds")
data <- TSS$TSS_in_mg_per_liter_estimated_from_SCI$TSS_mg_per_liter_median_confidence
TSS <- readRDS("C:/Users/livseyd/OneDrive - Queensland University of Technology/Documents/R/LoadDashboard/user_data_test/JRI/Analyte_data/TSS_imputed.rds")
imp <- TSS$Imputed_data$imputed
data <- TSS$Imputed_data$x
imp <- TSS$Imputed_data$imputed
data[imp] <- NA
data <- TSS$Imputed_data$x
imp <- TSS$Imputed_data$imputed
data[imp] <- NA
? forecast::auto.arima
data <- TSS$Imputed_data$x
imp <- TSS$Imputed_data$imputed
data[imp] <- NA
mod <- forecast::auto.arima(data,stepwise=FALSE,approximation=FALSE)$model
data <- TSS$Imputed_data$x[40000:nrow(TSS$Imputed_data)]
data <- TSS$Imputed_data$x[40000:nrow(TSS$Imputed_data)]
imp <- TSS$Imputed_data$imputed[40000:nrow(TSS$Imputed_data)]
data[imp] <- NA
nit <- -1
mod <- forecast::auto.arima(data,stepwise=FALSE,approximation=FALSE)$model
kal <- stats::KalmanSmooth(data, mod, nit)
ergS <- kal$smooth
kal <- stats::KalmanRun(data, mod, nit)
ergR <- kal$states
plot(ergS$x)
View(ergR)
plot(ergS)
plot(ergS[,1])
?%*%
?'%*%'
View(mod)
mod$Z
karimaR <- ergR[,,drop = FALSE] %*% as.matrix(mod$Z)
karimaS <- ergS[,,drop = FALSE] %*% as.matrix(mod$Z)
plot(karimaR)
lines(karimaS)
plot(karimaR,type='l')
lines(karimaS,col='red')
points(data)
plot(data)
lines(karimaS,col='red')
lines(karimaS,col='green')
plot(karima,data)
plot(karimaR,data)
plot(karimaR-data)
plot(karimaS-data)
karimaR[is.finite(data)] <- NA
plot(data)
lines(karimaS,col='red')
lines(karimaR,col='green')
plot(data,xlim = c(1,1000),ylim = c(1,50))
lines(karimaS,col='red')
lines(karimaR,col='green')
yp <- na_seasplit(
data,
algorithm = "kalman",
find_frequency = TRUE)
yp <- imputeTS::na_seasplit(
data,
algorithm = "kalman",
find_frequency = TRUE)
lines(yp,col='blue')
lines(as.vector(yp),col='blue')
plot(data,xlim = c(1,1000),ylim = c(1,50))
lines(as.vector(yp),col='blue')
yp <- imputeTS::na_seasplit(
data,
algorithm = "ma",
find_frequency = TRUE)
plot(data,xlim = c(1,1000),ylim = c(1,50))
lines(as.vector(yp),col='blue')
yp[is.finite(data)] <- NA
plot(data,xlim = c(1,1000),ylim = c(1,50))
lines(as.vector(yp),col='blue')
yp <- imputeTS::na_seasplit(
data,
algorithm = "kalman",
find_frequency = TRUE,,stepwise=FALSE,approximation=FALSE)
yp <- imputeTS::na_seasplit(
data,
algorithm = "kalman",
find_frequency = TRUE,stepwise=FALSE,approximation=FALSE)
View(imputeTS::na_seasplit)
imputeTS::apply_base_algorithm
?imputeTS::apply_base_algorithm
?apply_base_algorithm
yp <- imputeTS::na_seasplit(
data,
algorithm = "kalman",stepwise=FALSE,approximation=FALSE,
find_frequency = TRUE)
yp <- imputeTS::na_seasplit(
data,
algorithm = "kalman",
find_frequency = TRUE)
yp[is.finite(data)] <- NA
plot(data,xlim = c(1,1000),ylim = c(1,50))
lines(as.vector(yp),col='blue')
plot(data)
lines(as.vector(yp),col='blue')
lines(karimaS,col='red')
yp <- imputeTS::na_seadec(
data,
algorithm = "kalman",
find_frequency = TRUE)
yp <- imputeTS::na_seadec(
data,
algorithm = "kalman",
find_frequency = TRUE,stepwise=FALSE)
yp <- imputeTS::na_seadec(
data,
algorithm = "kalman",
find_frequency = TRUE)
yp[is.finite(data)] <- NA
plot(data)
lines(as.vector(yp),col='blue')
yp <- imputeTS::na_seasplit(
data,
algorithm = "kalman",
find_frequency = TRUE)
yp[is.finite(data)] <- NA
plot(data)
lines(as.vector(yp),col='blue')
lines(karimaS,col='red')
install.packages("keras")
install.packages("kerastuneR")
library(keras)
